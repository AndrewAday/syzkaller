package distiller

import (
	"github.com/google/syzkaller/tools/syz-strace/domain"
	"github.com/google/syzkaller/prog"
	"fmt"
	"os"
	"time"
	"math/rand"
)

type RandomDistiller struct {
	*DistillerMetadata
}

// Number of calls generated by distilling LTP + Kself + Posix + Glibc
const NumCallsLTPKselfPosixGlibc = 16442

// Number of calls generated by distilling LTP + Kself + Posix
const NumCallsLTPKselfPosix = 15333

// Number of calls generated by distilling LTP + Kself
const NumCallsLTPKself = 12712

func (d *RandomDistiller) getHeavyHitters(seeds domain.Seeds) map[*domain.Seed]int {
	seenIps := make(map[uint64]bool)
	heavyHitters := make(map[*domain.Seed]int)
	for i, seed := range seeds {
		ips := d.Contributes(seed, seenIps)  /* how many unique Ips does seed contribute */
		if ips > 0 {
			heavyHitters[seed] = i
			fmt.Printf("Seed: %s contributes: %d ips out of its total of: %d\n", seed.Call.Meta.Name, ips, len(seed.Cover))
		}
	}
	return heavyHitters
}

func (d *RandomDistiller) getRandomCallIndices(seeds domain.Seeds, N int, total int) map[int][]int {
	randIndices := make(map[int][]int)
	r := rand.New(rand.NewSource(time.Now().Unix()))
	perm := r.Perm(seeds.Len())
	callsPerBucket := (total - N) / N

	for i := 0; i < N; i++ {
		randIndices[i] = perm[(i * callsPerBucket):(i+1 * callsPerBucket)]
	}

	return randIndices
}

func (d *RandomDistiller) Add(seeds domain.Seeds) {
	d.Seeds = seeds
	for _, seed := range seeds {
		d.CallToSeed[seed.Call] = seed
		d.UpstreamDependencyGraph[seed] = make(map[int]map[prog.Arg][]prog.Arg, 0)
		seed.ArgMeta = make(map[prog.Arg]bool, 0)
		for call,idx := range seed.DependsOn {
			if _, ok := d.UpstreamDependencyGraph[seed][idx]; !ok {
				d.UpstreamDependencyGraph[seed][idx] = make(map[prog.Arg][]prog.Arg, 0)
			}
			d.CallToIdx[call] = idx
		}
		d.CallToIdx[seed.Call] = seed.CallIdx
	}
}

func (d *RandomDistiller) Distill(progs []*prog.Prog) (distilled []*prog.Prog) {
	fmt.Fprintf(os.Stderr, "Distilling %d programs with Random Distillation\n", len(progs))
	seeds := d.Seeds
	heavyHitters := d.getHeavyHitters(seeds)
	N := len(heavyHitters)
	totalRandCalls :=  NumCallsLTPKselfPosixGlibc  // change this to test different corpuses
	seedsWithoutHeavy := make(domain.Seeds, 0)
	for _, seed := range seeds{
		if _, ok := heavyHitters[seed]; !ok {
			seedsWithoutHeavy = append(seedsWithoutHeavy, seed)
		}
	}
	if len(seedsWithoutHeavy) != (seeds.Len() - N) {
		panic("Did not properly remove heavy hitters from random seeds")
	}
	randIndices := d.getRandomCallIndices(seedsWithoutHeavy, N, totalRandCalls)
	i := 0
	for heavyHitter, _ := range heavyHitters {
		randProg := new(prog.Prog)
		randProg.Calls = make([]*prog.Call, 0)
		for _, j := range randIndices[i] {
			randProg.Calls = append(randProg.Calls, seeds[j].Call)
		}
		randProg.Calls = append(randProg.Calls, heavyHitter.Call)
		distilled = append(distilled, randProg)
		i++
	}
	return distilled
}