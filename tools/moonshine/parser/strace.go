// Code generated by goyacc - DO NOT EDIT.

package parser

import __yyfmt__ "fmt"

import (
	"fmt"
	"github.com/google/syzkaller/tools/moonshine/types"
)

type StraceSymType struct {
	yys               int
	data              string
	val_int           int64
	val_double        float64
	val_uint          uint64
	val_field         *types.Field
	val_fields        []*types.Field
	val_call          *types.Call
	val_int_type      *types.IntType
	val_identifiers   []*types.BufferType
	val_buf_type      *types.BufferType
	val_struct_type   *types.StructType
	val_array_type    *types.ArrayType
	val_pointer_type  *types.PointerType
	val_flag_type     *types.FlagType
	val_binop         *types.Binop
	val_rel_expr_type *types.RelationalExpression
	val_type          types.Type
	val_types         []types.Type
	val_syscall       *types.Syscall
}

type StraceXError struct {
	state, xsym int
}

const (
	StraceDefault   = 57369
	StraceEofCode   = 57344
	AND             = 57354
	COMMA           = 57360
	DATETIME        = 57349
	DOUBLE          = 57352
	EQUALS          = 57367
	FLAG            = 57348
	IDENTIFIER      = 57347
	INT             = 57350
	LAND            = 57356
	LBRACKET        = 57361
	LBRACKET_SQUARE = 57363
	LOR             = 57355
	LPAREN          = 57365
	LSHIFT          = 57358
	NOFLAG          = 57368
	NOT             = 57357
	OR              = 57353
	RBRACKET        = 57362
	RBRACKET_SQUARE = 57364
	RPAREN          = 57366
	RSHIFT          = 57359
	STRING_LITERAL  = 57346
	UINT            = 57351
	StraceErrCode   = 57345

	StraceMaxDepth = 200
	StraceTabOfs   = -38
)

var (
	StracePrec = map[int]int{
		FLAG:   0,
		NOFLAG: 1,
	}

	StraceXLAT = map[int]int{
		57366: 0,  // RPAREN (34x)
		57362: 1,  // RBRACKET (28x)
		57360: 2,  // COMMA (27x)
		57364: 3,  // RBRACKET_SQUARE (27x)
		57348: 4,  // FLAG (13x)
		57347: 5,  // IDENTIFIER (12x)
		57353: 6,  // OR (12x)
		57376: 7,  // flag_type (11x)
		57350: 8,  // INT (11x)
		57351: 9,  // UINT (11x)
		57378: 10, // int_type (9x)
		57344: 11, // $end (7x)
		57354: 12, // AND (6x)
		57370: 13, // array_type (6x)
		57371: 14, // binop (6x)
		57372: 15, // buf_type (6x)
		57373: 16, // call_type (6x)
		57349: 17, // DATETIME (6x)
		57361: 18, // LBRACKET (6x)
		57363: 19, // LBRACKET_SQUARE (6x)
		57365: 20, // LPAREN (6x)
		57379: 21, // pointer_type (6x)
		57380: 22, // rel_expr_type (6x)
		57346: 23, // STRING_LITERAL (6x)
		57381: 24, // struct_type (6x)
		57383: 25, // type (6x)
		57384: 26, // types (4x)
		57367: 27, // EQUALS (3x)
		57377: 28, // identifiers (3x)
		57374: 29, // field (2x)
		57375: 30, // fields (2x)
		57382: 31, // syscall (1x)
		57369: 32, // $default (0x)
		57352: 33, // DOUBLE (0x)
		57345: 34, // error (0x)
		57356: 35, // LAND (0x)
		57355: 36, // LOR (0x)
		57358: 37, // LSHIFT (0x)
		57368: 38, // NOFLAG (0x)
		57357: 39, // NOT (0x)
		57359: 40, // RSHIFT (0x)
	}

	StraceSymNames = []string{
		"RPAREN",
		"RBRACKET",
		"COMMA",
		"RBRACKET_SQUARE",
		"FLAG",
		"IDENTIFIER",
		"OR",
		"flag_type",
		"INT",
		"UINT",
		"int_type",
		"$end",
		"AND",
		"array_type",
		"binop",
		"buf_type",
		"call_type",
		"DATETIME",
		"LBRACKET",
		"LBRACKET_SQUARE",
		"LPAREN",
		"pointer_type",
		"rel_expr_type",
		"STRING_LITERAL",
		"struct_type",
		"type",
		"types",
		"EQUALS",
		"identifiers",
		"field",
		"fields",
		"syscall",
		"$default",
		"DOUBLE",
		"error",
		"LAND",
		"LOR",
		"LSHIFT",
		"NOFLAG",
		"NOT",
		"RSHIFT",
	}

	StraceTokenLiteralStrings = map[int]string{}

	StraceReductions = map[int]struct{ xsym, components int }{
		0:  {0, 1},
		1:  {31, 7},
		2:  {31, 7},
		3:  {31, 11},
		4:  {31, 11},
		5:  {31, 10},
		6:  {31, 10},
		7:  {26, 1},
		8:  {26, 3},
		9:  {25, 1},
		10: {25, 1},
		11: {25, 1},
		12: {25, 1},
		13: {25, 1},
		14: {25, 1},
		15: {25, 1},
		16: {25, 1},
		17: {16, 4},
		18: {21, 4},
		19: {13, 3},
		20: {24, 3},
		21: {30, 1},
		22: {30, 3},
		23: {29, 3},
		24: {15, 1},
		25: {15, 1},
		26: {22, 1},
		27: {14, 3},
		28: {14, 3},
		29: {14, 3},
		30: {14, 3},
		31: {14, 3},
		32: {14, 3},
		33: {10, 1},
		34: {10, 1},
		35: {7, 1},
		36: {28, 1},
		37: {28, 2},
	}

	StraceXErrors = map[StraceXError]string{}

	StraceParseTab = [72][]uint8{
		// 0
		{8: 40, 31: 39},
		{11: 38},
		{5: 41},
		{20: 42},
		{4: 62, 53, 7: 50, 60, 61, 46, 12: 54, 48, 59, 45, 51, 58, 56, 55, 21: 47, 52, 57, 49, 44, 43},
		// 5
		{90},
		{31, 2: 88, 31},
		{29, 29, 29, 29},
		{28, 28, 28, 28, 6: 85},
		{27, 27, 27, 27},
		// 10
		{26, 26, 26, 26},
		{25, 25, 25, 25},
		{24, 24, 24, 24, 6: 82},
		{23, 23, 23, 23},
		{22, 22, 22, 22},
		// 15
		{20: 79},
		{9: 76},
		{4: 62, 53, 7: 50, 60, 61, 46, 12: 54, 48, 59, 45, 51, 58, 56, 55, 21: 47, 52, 57, 49, 44, 74},
		{5: 68, 29: 67, 66},
		{14, 14, 14, 14},
		// 20
		{13, 13, 13, 13},
		{12, 12, 12, 12, 6: 63},
		{5, 5, 5, 5, 6: 5},
		{4, 4, 4, 4, 6: 4},
		{3, 3, 3, 3, 6: 3},
		// 25
		{4: 62, 7: 64, 60, 61, 65},
		{11, 11, 11, 11, 6: 11},
		{10, 10, 10, 10, 6: 10},
		{1: 73},
		{1: 17, 71},
		// 30
		{27: 69},
		{4: 62, 53, 7: 50, 60, 61, 46, 12: 54, 48, 59, 45, 51, 58, 56, 55, 21: 47, 52, 57, 49, 70},
		{1: 15, 15},
		{5: 68, 29: 67, 72},
		{1: 16},
		// 35
		{18, 18, 18, 18},
		{3: 75},
		{19, 19, 19, 19},
		{27: 77},
		{4: 62, 53, 7: 50, 60, 61, 46, 12: 54, 48, 59, 45, 51, 58, 56, 55, 21: 47, 52, 57, 49, 78},
		// 40
		{20, 20, 20, 20},
		{4: 62, 53, 7: 50, 60, 61, 46, 12: 54, 48, 59, 45, 51, 58, 56, 55, 21: 47, 52, 57, 49, 44, 80},
		{81},
		{21, 21, 21, 21},
		{4: 62, 7: 83, 60, 61, 84},
		// 45
		{8, 8, 8, 8, 6: 8},
		{7, 7, 7, 7, 6: 7},
		{4: 62, 7: 87, 60, 61, 86},
		{9, 9, 9, 9, 6: 9},
		{6, 6, 6, 6, 6: 6},
		// 50
		{4: 62, 53, 7: 50, 60, 61, 46, 12: 54, 48, 59, 45, 51, 58, 56, 55, 21: 47, 52, 57, 49, 44, 89},
		{30, 3: 30},
		{27: 91},
		{8: 92, 93},
		{4: 103, 11: 37, 20: 104},
		// 55
		{4: 94, 11: 36, 20: 95},
		{20: 98},
		{4: 62, 7: 96},
		{97},
		{11: 32},
		// 60
		{5: 100, 28: 99},
		{102},
		{2, 5: 100, 28: 101},
		{1},
		{11: 34},
		// 65
		{20: 107},
		{4: 62, 7: 105},
		{106},
		{11: 33},
		{5: 100, 28: 108},
		// 70
		{109},
		{11: 35},
	}
)

var StraceDebug = 0

type StraceLexer interface {
	Lex(lval *StraceSymType) int
	Error(s string)
}

type StraceLexerEx interface {
	StraceLexer
	Reduced(rule, state int, lval *StraceSymType) bool
}

func StraceSymName(c int) (s string) {
	x, ok := StraceXLAT[c]
	if ok {
		return StraceSymNames[x]
	}

	if c < 0x7f {
		return __yyfmt__.Sprintf("%q", c)
	}

	return __yyfmt__.Sprintf("%d", c)
}

func Stracelex1(yylex StraceLexer, lval *StraceSymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = StraceEofCode
	}
	if StraceDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", StraceSymName(n), n, n, lval)
	}
	return n
}

func StraceParse(yylex StraceLexer) int {
	const yyError = 34

	yyEx, _ := yylex.(StraceLexerEx)
	var yyn int
	var yylval StraceSymType
	var yyVAL StraceSymType
	yyS := make([]StraceSymType, 200)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if StraceDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]StraceSymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yylval.yys = yystate
		yychar = Stracelex1(yylex, &yylval)
		var ok bool
		if yyxchar, ok = StraceXLAT[yychar]; !ok {
			yyxchar = len(StraceSymNames) // > tab width
		}
	}
	if StraceDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := StraceParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += StraceTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		yyshift = yyn
		if StraceDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if StraceDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if StraceDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", StraceSymName(yychar), yystate)
			}
			msg, ok := StraceXErrors[StraceXError{yystate, yyxchar}]
			if !ok {
				msg, ok = StraceXErrors[StraceXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = StraceXErrors[StraceXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = StraceXErrors[StraceXError{yyshift, -1}]
			}
			if yychar > 0 {
				ls := StraceTokenLiteralStrings[yychar]
				if ls == "" {
					ls = StraceSymName(yychar)
				}
				if ls != "" {
					switch {
					case msg == "":
						msg = __yyfmt__.Sprintf("unexpected %s", ls)
					default:
						msg = __yyfmt__.Sprintf("unexpected %s, %s", ls, msg)
					}
				}
			}
			if msg == "" {
				msg = "syntax error"
			}
			yylex.Error(msg)
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := StraceParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + StraceTabOfs
					if yyn > 0 { // hit
						if StraceDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if StraceDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if StraceDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if StraceDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", StraceSymName(yychar))
			}
			if yychar == StraceEofCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := StraceReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]StraceSymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(StraceParseTab[yyS[yyp].yys][x]) + StraceTabOfs
	/* reduction by production r */
	if StraceDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, StraceSymNames[x], yystate)
	}

	switch r {
	case 1:
		{
			yyVAL.val_syscall = types.NewSyscall(yyS[yypt-6].val_int, yyS[yypt-5].data, yyS[yypt-3].val_types, yyS[yypt-0].val_int)
			yylex.(*lexer).result = yyVAL.val_syscall
		}
	case 2:
		{
			yyVAL.val_syscall = types.NewSyscall(yyS[yypt-6].val_int, yyS[yypt-5].data, yyS[yypt-3].val_types, int64(yyS[yypt-0].val_uint))
			yylex.(*lexer).result = yyVAL.val_syscall
		}
	case 3:
		{
			yyVAL.val_syscall = types.NewSyscall(yyS[yypt-10].val_int, yyS[yypt-9].data, yyS[yypt-7].val_types, yyS[yypt-4].val_int)
			yylex.(*lexer).result = yyVAL.val_syscall
		}
	case 4:
		{
			yyVAL.val_syscall = types.NewSyscall(yyS[yypt-10].val_int, yyS[yypt-9].data, yyS[yypt-7].val_types, int64(yyS[yypt-4].val_uint))
			yylex.(*lexer).result = yyVAL.val_syscall
		}
	case 5:
		{
			yyVAL.val_syscall = types.NewSyscall(yyS[yypt-9].val_int, yyS[yypt-8].data, yyS[yypt-6].val_types, yyS[yypt-3].val_int)
			yylex.(*lexer).result = yyVAL.val_syscall
		}
	case 6:
		{
			yyVAL.val_syscall = types.NewSyscall(yyS[yypt-9].val_int, yyS[yypt-8].data, yyS[yypt-6].val_types, int64(yyS[yypt-3].val_uint))
			yylex.(*lexer).result = yyVAL.val_syscall
		}
	case 7:
		{
			types := make([]types.Type, 0)
			types = append(types, yyS[yypt-0].val_type)
			yyVAL.val_types = types
		}
	case 8:
		{
			yyS[yypt-0].val_types = append([]types.Type{yyS[yypt-2].val_type}, yyS[yypt-0].val_types...)
			yyVAL.val_types = yyS[yypt-0].val_types
		}
	case 9:
		{
			yyVAL.val_type = yyS[yypt-0].val_buf_type
		}
	case 10:
		{
			yyVAL.val_type = yyS[yypt-0].val_int_type
		}
	case 11:
		{
			yyVAL.val_type = yyS[yypt-0].val_pointer_type
		}
	case 12:
		{
			yyVAL.val_type = yyS[yypt-0].val_array_type
		}
	case 13:
		{
			yyVAL.val_type = yyS[yypt-0].val_struct_type
		}
	case 14:
		{
			yyVAL.val_type = yyS[yypt-0].val_flag_type
		}
	case 15:
		{
			yyVAL.val_type = yyS[yypt-0].val_call
		}
	case 16:
		{
			yyVAL.val_type = yyS[yypt-0].val_rel_expr_type
		}
	case 17:
		{
			yyVAL.val_call = types.NewCallType(yyS[yypt-3].data, yyS[yypt-1].val_types)
		}
	case 18:
		{
			yyVAL.val_pointer_type = types.NewPointerType(yyS[yypt-2].val_uint, yyS[yypt-0].val_type)
		}
	case 19:
		{
			arr := types.NewArrayType(yyS[yypt-1].val_types)
			yyVAL.val_array_type = arr
		}
	case 20:
		{
			yyVAL.val_struct_type = types.NewStructType(yyS[yypt-1].val_fields)
		}
	case 21:
		{
			fields := make([]*types.Field, 0)
			fields = append(fields, yyS[yypt-0].val_field)
			yyVAL.val_fields = fields
		}
	case 22:
		{
			yyS[yypt-0].val_fields = append([]*types.Field{yyS[yypt-2].val_field}, yyS[yypt-0].val_fields...)
			yyVAL.val_fields = yyS[yypt-0].val_fields
		}
	case 23:
		{
			yyVAL.val_field = types.NewField(yyS[yypt-2].data, yyS[yypt-0].val_type)
		}
	case 24:
		{
			fmt.Printf("buffer type: %s\n", yyS[yypt-0].data)
			yyVAL.val_buf_type = types.NewBufferType(yyS[yypt-0].data)
		}
	case 25:
		{
			fmt.Printf("datetime: %s\n", yyS[yypt-0].data)
			yyVAL.val_buf_type = types.NewBufferType(yyS[yypt-0].data)
		}
	case 26:
		{
			yyVAL.val_rel_expr_type = types.NewRelationalExpression(yyS[yypt-0].val_binop)
			fmt.Printf("%s\n", yyVAL.val_rel_expr_type.String())
		}
	case 27:
		{
			yyVAL.val_binop = types.NewBinop(types.NewRelationalExpression(yyS[yypt-2].val_binop), types.OR, yyS[yypt-0].val_flag_type)
		}
	case 28:
		{
			yyVAL.val_binop = types.NewBinop(types.NewRelationalExpression(yyS[yypt-2].val_binop), types.OR, yyS[yypt-0].val_int_type)
		}
	case 29:
		{
			yyVAL.val_binop = types.NewBinop(yyS[yypt-2].val_int_type, types.OR, yyS[yypt-0].val_int_type)
		}
	case 30:
		{
			yyVAL.val_binop = types.NewBinop(yyS[yypt-2].val_flag_type, types.OR, yyS[yypt-0].val_flag_type)
		}
	case 31:
		{
			yyVAL.val_binop = types.NewBinop(yyS[yypt-2].val_flag_type, types.OR, yyS[yypt-0].val_int_type)
		}
	case 32:
		{
			yyVAL.val_binop = types.NewBinop(yyS[yypt-2].val_int_type, types.OR, yyS[yypt-0].val_flag_type)
		}
	case 33:
		{
			yyVAL.val_int_type = types.NewIntType(yyS[yypt-0].val_int)
		}
	case 34:
		{
			yyVAL.val_int_type = types.NewIntType(int64(yyS[yypt-0].val_uint))
		}
	case 35:
		{
			yyVAL.val_flag_type = types.NewFlagType(yyS[yypt-0].data)
		}
	case 36:
		{
			ids := make([]*types.BufferType, 0)
			ids = append(ids, types.NewBufferType(yyS[yypt-0].data))
			yyVAL.val_identifiers = ids
		}
	case 37:
		{
			yyS[yypt-0].val_identifiers = append(yyS[yypt-0].val_identifiers, types.NewBufferType(yyS[yypt-1].data))
			yyVAL.val_identifiers = yyS[yypt-0].val_identifiers
		}

	}

	if yyEx != nil && yyEx.Reduced(r, exState, &yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}
